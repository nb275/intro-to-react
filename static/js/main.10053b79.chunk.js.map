{"version":3,"sources":["Todo.js","NewTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isChecked","name","handleChange","bind","event","this","console","log","document","getElementById","classList","remove","add","id","className","type","onChange","Component","NewTodo","onSubmit","addTodo","onClick","App","e","value","getInitialTodos","xhttp","XMLHttpRequest","onreadystatechange","readyState","status","todos","JSON","parse","responseText","length","i","text","open","setRequestHeader","send","todoItems","newTodoItem","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+SAwEeA,G,8DAlEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,UAAW,QACzB,EAAKC,KAAOH,EAAMG,KAElB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALH,E,yDASNC,IACS,IAAjBC,KAAKL,WACNM,QAAQC,IAAI,sCACEC,SAASC,eAAe,gBAChCC,UAAUC,OAAO,kBACzBN,KAAKL,WAAU,IAGfM,QAAQC,IAAI,kCACIC,SAASC,eAAe,gBAChCC,UAAUE,IAAI,kBACtBP,KAAKL,WAAU,K,+BAQjB,OAIE,wBAAIa,GAAG,gBAAgBC,UAAU,6BAEjC,0BAAMD,GAAG,gBACRR,KAAKJ,MAEN,2BAAOc,KAAK,WACXF,GAAG,gBACHG,SAAUX,KAAKH,eAGhB,4BAAQW,GAAG,eAAX,oB,GA5CeI,cCuBJC,G,6KArBb,OAEE,yBAAKJ,UAAU,OACX,yBAAKA,UAAU,WAAWD,GAAG,UAE7B,yBAAKC,UAAU,WAAWD,GAAG,YAC3B,0BACCM,SAAUd,KAAKP,MAAMsB,SAEtB,2BAAOL,KAAK,OAAOF,GAAG,WACtB,4BAAQE,KAAK,SAASM,QAAShB,KAAKP,MAAMsB,QAASP,GAAI,SAAvD,mB,GAZYI,cCqKPK,E,kDAlKb,aAAe,IAAD,8BACZ,gBAaFF,QAAS,SAACG,GACPjB,QAAQC,IAAI,QAabC,SAASC,eAAe,UAAUe,MAAM,IA5B5B,EAgCdC,gBAAkB,SAACF,GACjB,IACIG,EAAQ,IAAIC,eACdD,EAAME,mBAAqB,WAEzB,GAAwB,IAApBvB,KAAKwB,YAAoC,MAAhBxB,KAAKyB,OAAgB,CAC9CxB,QAAQC,IAAI,sBACd,IAAIwB,EAAQC,KAAKC,MAAM5B,KAAK6B,cAE5B,GADA5B,QAAQC,IAAIwB,GACRA,EAAMI,OAAO,EACf,IAAI,IAAIC,EAAGL,EAAMI,OAAO,EAAGC,GAAG,EAAGA,IAAI,CACnC9B,QAAQC,IAAIwB,EAAMK,GAAGC,MAEON,EAAMK,GAAGC,WA6Cd,IAApBhC,KAAKwB,YACZvB,QAAQC,IAAIF,KAAK6B,eAMrBR,EAAMY,KAAK,MAAO,6BAA6B,GAC/CZ,EAAMa,iBAAiB,YAjEZ,sCAkEXb,EAAMc,QAjGR,EAAKzC,MAAQ,CACX0C,UAAW,GACXC,YAAa,CACXL,KAAM,KAGV,EAAKZ,gBAAkB,EAAKA,gBAAgBtB,KAArB,gBARX,E,kGA0GhB,OACE,yBAAKW,UAAY,QAEf,yBAAKA,UAAU,eACf,iDAKA,yBAAKD,GAAK,iBACV,yBAAK8B,MAAM,OAGX,yBAAKA,MAAM,WAAW9B,GAAG,UAKzB,yBAAK8B,MAAM,WAAW9B,GAAG,QAEzB,wBAAIA,GAAG,YACP,kBAAC,EAAD,CAAMZ,KAAK,gBACX,kBAAC,EAAD,CAAMA,KAAK,gBACX,kBAAC,EAAD,CAAMA,KAAK,mBASX,yBAAK0C,MAAM,OACX,yBAAKA,MAAM,WAAW9B,GAAG,UAGzB,yBAAK8B,MAAM,WAAW9B,GAAG,YACzB,kBACA,EADA,CACQO,QACNf,KAAKe,kB,GAlJOH,aCME2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3C,SAASC,eAAe,SDyHpB,kBAAmB2C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.10053b79.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './Todo.css';\n\nclass Todo extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {isChecked: 'true'};\n    this.name = props.name;\n\n    this.handleChange = this.handleChange.bind(this);\n\n  }\n\n  handleChange(event) {\n    if(this.isChecked===true){\n      console.log('now unchecked, now unstruckthrough');\n    const element = document.getElementById(\"todoItemText\");\n    element.classList.remove(\"struckthrough2\");\n    this.isChecked=false;\n  }\n  else{\n    console.log('now checked, now struckthrough');\n    const element = document.getElementById(\"todoItemText\");\n    element.classList.add(\"struckthrough2\");\n    this.isChecked=true;\n  }\n   }\n\n\n\nrender() {\n\n  return (\n\n\n\n    <li id=\"todoListItem1\" className=\"struckthrough textstyling\">\n\n    <span id=\"todoItemText\">\n    {this.name}\n    </span>\n    <input type=\"checkbox\"\n     id=\"CheckboxItem1\"\n     onChange={this.handleChange}\n     />\n\n    <button id=\"deleteItem1\">Remove ToDo</button>\n    </li>\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n  );\n}\n\n\n\n}\nexport default Todo;\n\n\n\n// class App extends Component { -> class Todo extends Component {\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './NewTodo.css';\n\nclass NewTodo extends Component {\nrender() {\n  return (\n\n    <div className=\"row\">\n        <div className=\"col-sm-4\" id=\"empty\">\n        </div>\n        <div className=\"col-sm-4\" id=\"notempty\">\n          <form\n           onSubmit={this.props.addTodo}\n          >\n          <input type=\"text\" id=\"newAdd\"/>\n          <button type=\"button\" onClick={this.props.addTodo} id= \"myBtn\">Add ToDo</button>\n          </form>\n        </div>\n      </div>\n\n  );\n}\n\n\n\n}\nexport default NewTodo;\n","import React, {Component} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Todo from './Todo';\nimport NewTodo from './NewTodo';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      todoItems: [],\n      newTodoItem: {\n        text: ''\n      },\n    }\n    this.getInitialTodos = this.getInitialTodos.bind(this);\n  }\n  componentDidMount() {\n\n  }\n\n  addTodo= (e) => {\n     console.log('here');\n    // const newTodo = this.state.newTodoItem\n    // const updatedTodoItems = [...this.state.todoItems, newTodo]\n    //     this.setState({\n    //       todoItems: updatedTodoItems,\n    //       newTodoItem: {\n    //         text: ''\n    //       },\n    //     })\n    // var data = {\n    //   text: 'potato'\n    // }\n    //     console.log(updatedTodoItems);\n    document.getElementById(\"newAdd\").value='';\n  }\n\n\n  getInitialTodos = (e) => {\n    var APIKey = \"c1d50e-f554c3-89956a-90f947-7ca7ea\";\n    var xhttp = new XMLHttpRequest();\n      xhttp.onreadystatechange = function()\n      {\n        if (this.readyState === 4 && this.status === 200) {\n            console.log(\"GET response text:\")\n          var todos = JSON.parse(this.responseText);\n          console.log(todos);\n          if (todos.length>0){\n            for(var i =todos.length-1; i>-1; i--){\n              console.log(todos[i].text);\n\n              const element = <Todo name={todos[i].text}/>;\n\n              //\n              // var newListItem = document.createElement(\"li\");\n              // var newCheckbox = document.createElement(\"input\");\n              // var newDelete = document.createElement(\"button\");\n              // var inverti = (i-todos.length)*(-1);\n              //\n              // var rawText=todos[i].text;\n              //\n              // newListItem.innerHTML = rawText;\n              // newListItem.id= \"todoListItem\"+inverti;\n              //\n              // newCheckbox.setAttribute(\"type\", \"checkbox\");\n              // newCheckbox.id= \"CheckboxItem\"+inverti;\n              //\n              // newDelete.innerHTML = \"Remove ToDo\";\n              // newDelete.id = \"deleteItem\" + inverti;\n              //\n              //\n              // document.getElementById(\"todoList\").append(newListItem);\n              // document.getElementById(\"todoListItem\"+inverti).append(newCheckbox);\n              // document.getElementById(\"todoListItem\"+inverti).append(newDelete);\n              //\n              // if((todos[i].completed)===true){\n              // newCheckbox.checked = true;\n              // var element = document.getElementById(\"todoListItem\"+inverti);\n              // element.classList.add(\"struckthrough\");\n              //\n              // }\n              // var styling = document.getElementById(\"todoListItem\"+inverti);\n              // styling.classList.add(\"textstyling\");\n\n              // let length = JSON.stringify(todos[i].id).length;\n              // let p = inverti;\n              // let currentId = JSON.stringify(todos[i].id).substring(1,length-1);\n              // let currentBoolean=(todos[i].completed);\n\n              // document.getElementById(\"CheckboxItem\"+inverti).addEventListener(\"click\", function(){ decideTF(p,currentId); });\n              // document.getElementById(\"deleteItem\"+inverti).addEventListener(\"click\", function(){ deletePost(p,currentId); });\n\n            }\n\n          }\n        }\n        else if (this.readyState === 4){\n          console.log(this.responseText);\n        }\n\n\n      };\n\n      xhttp.open(\"GET\", \"https://cse204.work/todos\", true);\n      xhttp.setRequestHeader(\"x-api-key\",APIKey);\n      xhttp.send();\n\n  }\n\n\n\nrender() {\nreturn(\n  <div className = \"body\">\n\n    <div className=\"text-center\">\n    <h1>\n    Nick's Todo List\n    </h1>\n    </div>\n\n    <div id = \"listContainer\">\n    <div class=\"row\">\n\n\n    <div class=\"col-sm-4\" id=\"empty\">\n    </div>\n\n\n\n    <div class=\"col-sm-4\" id=\"full\">\n\n    <ol id=\"todoList\">\n    <Todo name=\"Todo Item 1\" />\n    <Todo name=\"Todo Item 2\" />\n    <Todo name=\"Todo Item 3\" />\n\n    </ol>\n\n    </div>\n    </div>\n\n\n\n    <div class=\"row\">\n    <div class=\"col-sm-4\" id=\"empty\">\n    </div>\n\n    <div class=\"col-sm-4\" id=\"notempty\">\n    <\n    NewTodo addTodo = {\n      this.addTodo\n    }/>\n    </div>\n\n    </div>\n    </div>\n    </div>\n\n);\n\n\n\n\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change //test\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}